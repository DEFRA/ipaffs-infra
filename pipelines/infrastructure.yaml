---
trigger:
  branches:
    include:
      - main
  paths:
    include:
      - bicep/*.bicep
      - bicep/**/*.bicep
      - bicep/**/main.parameters.json
      - pipelines/infrastructure.yaml

pr:
  branches:
    include:
      - main
  paths:
    include:
      - bicep/*.bicep
      - bicep/**/*.bicep
      - bicep/**/*.parameters.json
      - pipelines/infrastructure.yaml

pool:
  name: DEFRA-COMMON-ubuntu2204-SSV5

variables:
  - group: "${{ parameters.environmentName }}"
  - template: "vars/common.yaml"
  - template: "vars/${{ lower(parameters.environmentName) }}.yaml"
  - name: helmDryRun
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
      value: ''
    ${{ else }}:
      value: '--dry-run'

parameters:
  - name: environmentName
    type: string
    default: POC
    values:
      - POC

stages:
  - stage: DeployInfrastructure
    displayName: Deploy Infrastructure
    jobs:
      - deployment: DeployBicep
        displayName: Deploy Bicep Templates
        environment:
          name: "${{ parameters.environmentName }}"
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: AzureCLI@2
                  displayName: WhatIf - Resource Group
                  inputs:
                    azureSubscription: $(serviceConnection)
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      az deployment sub what-if \
                        --name "ResourceGroup-$(Build.BuildId)" \
                        --location $(location) \
                        --template-file bicep/resource-group.bicep \
                        --parameters @bicep/envs/${{ lower(parameters.environmentName) }}/resource-group.parameters.json

                - task: AzureCLI@2
                  displayName: Deploy - ResourceGroup
                  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
                  inputs:
                    azureSubscription: $(serviceConnection)
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      az deployment sub create \
                        --name "ResourceGroup-$(Build.BuildId)" \
                        --location $(location) \
                        --template-file bicep/resource-group.bicep \
                        --parameters @bicep/envs/${{ lower(parameters.environmentName) }}/resource-group.parameters.json

                - task: AzureCLI@2
                  displayName: WhatIf - Main
                  inputs:
                    azureSubscription: $(serviceConnection)
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      az deployment group what-if \
                        --name "Main-$(Build.BuildId)" \
                        --resource-group $(resourceGroupName) \
                        --template-file bicep/main.bicep \
                        --parameters @bicep/envs/${{ lower(parameters.environmentName) }}/main.parameters.json

                - task: AzureCLI@2
                  displayName: Deploy - Main
                  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
                  inputs:
                    azureSubscription: $(serviceConnection)
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      az deployment group create \
                        --name "Main-$(Build.BuildId)" \
                        --resource-group $(resourceGroupName) \
                        --template-file bicep/main.bicep \
                        --parameters @bicep/envs/${{ lower(parameters.environmentName) }}/main.parameters.json

  - stage: ImportAcrArtifacts
    displayName: Import ACR Artifacts
    jobs:
      - deployment: ImportContainerImages
        displayName: Import Container Images
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
        environment:
          name: "${{ parameters.environmentName }}"
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - template: steps/import-container-images.yaml

  - stage: DeployHelmCharts
    displayName: Deploy Helm Charts
    jobs:
      - deployment: DeployHelm
        displayName: Deploy with Helm
        environment:
          name: "${{ parameters.environmentName }}"
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: HelmDeploy@0
                  displayName: Helm Install - nginx-ingress
                  inputs:
                    connectionType: Azure Resource Manager
                    azureSubscription: $(serviceConnection)
                    azureResourceGroup: $(resourceGroupName)
                    kubernetesCluster: $(kubernetesCluster)
                    namespace: ingress-nginx
                    command: upgrade
                    chartName: ingress-nginx
                    chartVersion: 4.13.3
                    releaseName: ingress-nginx
                    install: true
                    useClusterAdmin: true
                    arguments: >-
                      --repo https://kubernetes.github.io/ingress-nginx
                      -f helm-charts/ingress-nginx-values.yaml
                      --create-namespace
                      --set global.image.registry=$(acrLoginServer)
                      $(helmDryRun)

                - task: HelmDeploy@0
                  displayName: Helm Install - cert-manager
                  inputs:
                    connectionType: Azure Resource Manager
                    azureSubscription: $(serviceConnection)
                    azureResourceGroup: $(resourceGroupName)
                    kubernetesCluster: $(kubernetesCluster)
                    namespace: cert-manager
                    command: upgrade
                    chartName: "oci://quay.io/jetstack/charts/cert-manager"
                    chartVersion: 1.19.1
                    releaseName: cert-manager
                    install: true
                    useClusterAdmin: true
                    arguments: >-
                      -f helm-charts/cert-manager-values.yaml
                      --create-namespace
                      --set image.registry=$(acrLoginServer)
                      --set cainjector.image.registry=$(acrLoginServer)
                      --set startupapicheck.image.registry=$(acrLoginServer)
                      --set webhook.image.registry=$(acrLoginServer)
                      $(helmDryRun)

# vim: set ts=2 sts=2 sw=2 et:
